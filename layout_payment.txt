'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Loader2, CheckCircle, XCircle, CreditCard, Building, QrCode, Banknote } from 'lucide-react';
import Link from 'next/link';

interface DeviceInfo {
  computerId: string;
  name: string;
  os: string;
  processor: string;
  ram: string;
}

interface Product {
  id: string;
  name: string;
  description: string;
  price?: number;
  duration?: string;
  features?: string[];
}

interface Invoice {
  id: string;
  product: Product;
  deviceInfo: DeviceInfo;
  total: number;
  paymentMethod: 'bank' | 'qris' | 'cash';
  userName?: string;
  userEmail?: string;
  companyName?: string;
  bankInfo?: {
    bankName: string;
    accountNumber: string;
    accountName: string;
  };
}

const bankAccounts = [
  { bankName: 'BCA', accountNumber: '1234567890', accountName: 'PT. Nexus Technology' },
  { bankName: 'Mandiri', accountNumber: '9876543210', accountName: 'PT. Nexus Technology' },
  { bankName: 'BNI', accountNumber: '5555666677', accountName: 'PT. Nexus Technology' }
];

const InvoicePage = () => {
  const [invoice, setInvoice] = useState<Invoice | null>(null);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo | null>(null);
  const [invoiceCreated, setInvoiceCreated] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState<'bank' | 'qris' | 'cash'>('bank');
  const [selectedBank, setSelectedBank] = useState(bankAccounts[0]);
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [companyName, setCompanyName] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // Generate computer ID
  const generateComputerId = () => {
    const timestamp = Date.now().toString();
    const random = Math.random().toString(36).substring(2);
    return btoa(timestamp + random).replace(/[^a-zA-Z0-9]/g, '').substring(0, 12);
  };

  // Get device info
  const getDeviceInfo = (): DeviceInfo => {
    const userAgent = navigator.userAgent;
    let os = 'Unknown';
    
    if (userAgent.includes('Windows')) os = 'Windows';
    else if (userAgent.includes('Mac')) os = 'macOS';
    else if (userAgent.includes('Linux')) os = 'Linux';
    else if (userAgent.includes('Android')) os = 'Android';
    else if (userAgent.includes('iOS')) os = 'iOS';

    const ramOptions = ['8GB', '16GB', '32GB', '64GB'];
    const processorOptions = ['Intel Core i5', 'Intel Core i7', 'AMD Ryzen 5', 'AMD Ryzen 7', 'Apple M1', 'Apple M2'];
    
    return {
      computerId: generateComputerId(),
      name: 'My-PC',
      os: os,
      processor: processorOptions[Math.floor(Math.random() * processorOptions.length)],
      ram: ramOptions[Math.floor(Math.random() * ramOptions.length)]
    };
  };

  // Format currency
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR'
    }).format(amount);
  };

  // Extract product from URL params
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const productParam = urlParams.get('product');
    
    if (productParam) {
      try {
        const product = JSON.parse(decodeURIComponent(productParam));
        setSelectedProduct(product);
        
        // Initialize invoice
        const deviceInfo = getDeviceInfo();
        setDeviceInfo(deviceInfo);
        
        setInvoice({
          id: `INV-${Date.now()}`,
          product: product,
          deviceInfo: deviceInfo,
          total: product.price || 599000,
          paymentMethod: 'bank',
          userName: name || '',
          userEmail: email || '',
          companyName: companyName || ''
        });
      } catch (e) {
        console.error('Error parsing product from URL:', e);
      }
    } else {
      // If no product in URL, redirect to payment page
      window.location.href = '/payment';
    }
  }, []);

  // Handle checkout - create invoice via API
  const handleCheckout = async () => {
    if (!invoice || !selectedProduct) return;
    
    // Validate customer information
    if (!name.trim()) {
      setError('Nama pengguna harus diisi');
      return;
    }
    
    if (!email.trim()) {
      setError('Alamat email harus diisi');
      return;
    }
    
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      setError('Format email tidak valid');
      return;
    }
    
    if (!companyName.trim()) {
      setError('Nama perusahaan harus diisi');
      return;
    }
    
    setLoading(true);
    setError('');
    
    try {
      console.log('Current invoice object:', invoice);
      
      // Create invoice via API
      const invoiceData = {
        invoiceNumber: `INV-${Date.now()}`,
        companyId: 'company-123', // This should come from user/company data
        issueDate: new Date().toISOString(),
        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days from now
        total: invoice.total,
        paymentMethod,
        bankId: selectedBank.bankName, // Use selected bank name as bankId
        customerName: name || '',
        customerEmail: email || '',
        companyName: companyName || '',
        lineItems: [
          {
            planId: selectedProduct.id, // Use the plan ID
            description: `${selectedProduct.name} License`,
            quantity: 1,
            unitPrice: selectedProduct.price,
            total: invoice.total
          }
        ]
      };

      console.log('Sending invoice creation request:', invoiceData);

      // Make API call to create invoice
      const response = await fetch('/api/invoices', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(invoiceData)
      });

      console.log('Invoice creation response status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Invoice creation failed:', errorText);
        throw new Error(`Failed to create invoice: ${response.status} - ${errorText}`);
      }

      const createdInvoice = await response.json();
      console.log('Invoice creation response:', createdInvoice);
      
      // Update the invoice with the new ID from the API
      setInvoice({
        ...invoice,
        id: createdInvoice.invoiceNumber || invoiceData.invoiceNumber
      });
      
      setInvoiceCreated(true);
      setSuccess('Invoice berhasil dibuat. Silakan lanjutkan ke pembayaran.');
    } catch (error) {
      console.error('Error creating invoice:', error);
      setError('Gagal membuat invoice. Silakan coba lagi.');
    } finally {
      setLoading(false);
    }
  };
  
  // Handle cancel checkout - reset the invoice creation state
  const handleCancelCheckout = () => {
    setInvoiceCreated(false);
    setSuccess('');
  };

  // Handle payment confirmation
  const handlePaymentConfirmation = async () => {
    if (!invoice) return;
    
    setLoading(true);
    setError('');

    try {
      // Simulasi proses konfirmasi pembayaran
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Generate license key
      const licenseKey = generateLicenseKey();
      
      // Aktivasi license


    

      // Store license in localStorage and redirect to dashboard
      const newLicense = {
        ...activationResult.license,
        status: 'active',
        lastSeen: new Date().toISOString(),
        device: invoice.deviceInfo
      };

      localStorage.setItem('license', JSON.stringify(newLicense));
      window.location.href = '/dashboard';

    } catch (err) {
      setError('Konfirmasi pembayaran gagal. Silakan coba lagi.');
    } finally {
      setLoading(false);
    }
  };



  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-4">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-8 pt-8">
          <div className="flex items-center justify-center gap-3 mb-4">
            <CreditCard className="w-8 h-8 text-blue-600" />
            <h1 className="text-2xl font-bold text-slate-900">Invoice Pembayaran</h1>
          </div>
          <p className="text-slate-600">Lengkapi informasi untuk membuat invoice</p>
        </div>

        {invoice && (
          <Card className="w-full mx-auto">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <CreditCard className="w-5 h-5" />
                Invoice Pembayaran
              </CardTitle>
              <CardDescription>
                Invoice #{invoice.id}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Customer Information */}
              <div className="space-y-2">
                <h3 className="font-semibold">Informasi Pelanggan</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  <div>
                    <Label htmlFor="namaPengguna">Nama Pengguna</Label>
                    <Input
                      id="namaPengguna"
                      value={name}
                      onChange={(e) => setName(e.target.value)}
                      placeholder="Nama Pengguna"
                    />
                  </div>
                  <div>
                    <Label htmlFor="email">Alamat Email</Label>
                    <Input
                      id="email"
                      type="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      placeholder="Alamat Email"
                    />
                  </div>
                  <div className="md:col-span-2">
                    <Label htmlFor="namaPerusahaan">Nama Perusahaan</Label>
                    <Input
                      id="namaPerusahaan"
                      value={companyName}
                      onChange={(e) => setCompanyName(e.target.value)}
                      placeholder="Nama Perusahaan"
                    />
                  </div>
                </div>
              </div>

              {/* Product Details */}
              <div className="space-y-2">
                <h3 className="font-semibold">Detail Produk</h3>
                <div className="p-3 bg-slate-50 rounded-lg">
                  <div className="flex justify-between items-center mb-2">
                    <div>
                      <p className="font-medium">{invoice.product.name}</p>
                      <p className="text-sm text-slate-600">{invoice.product.description}</p>
                      <p className="text-xs text-slate-500 mt-1">Durasi: {invoice.product.duration}</p>
                    </div>
                    <p className="font-semibold">{formatCurrency(invoice.product.price || 0)}</p>
                  </div>
                </div>
              </div>

              {/* Device Info */}
              <div className="space-y-2">
                <h3 className="font-semibold">Informasi Perangkat</h3>
                <div className="p-3 bg-slate-50 rounded-lg text-sm text-slate-600">
                  <p><span className="font-medium">Computer ID:</span> {invoice.deviceInfo.computerId}</p>
                  <p><span className="font-medium">OS:</span> {invoice.deviceInfo.os}</p>
                  <p><span className="font-medium">Processor:</span> {invoice.deviceInfo.processor}</p>
                  <p><span className="font-medium">RAM:</span> {invoice.deviceInfo.ram}</p>
                </div>
              </div>

              {/* Payment Method */}
              <div className="space-y-2">
                <h3 className="font-semibold">Metode Pembayaran</h3>
                <RadioGroup value={paymentMethod} onValueChange={(value) => setPaymentMethod(value as any)}>
                  <div className="flex items-center space-x-2 p-3 border rounded-lg">
                    <RadioGroupItem value="bank" id="bank" />
                    <Label htmlFor="bank" className="flex items-center gap-2 cursor-pointer">
                      <Building className="w-4 h-4" />
                      Transfer Bank
                    </Label>
                  </div>
                  <div className="flex items-center space-x-2 p-3 border rounded-lg">
                    <RadioGroupItem value="qris" id="qris" />
                    <Label htmlFor="qris" className="flex items-center gap-2 cursor-pointer">
                      <QrCode className="w-4 h-4" />
                      QRIS
                    </Label>
                  </div>
                  <div className="flex items-center space-x-2 p-3 border rounded-lg">
                    <RadioGroupItem value="cash" id="cash" />
                    <Label htmlFor="cash" className="flex items-center gap-2 cursor-pointer">
                      <Banknote className="w-4 h-4" />
                      Tunai
                    </Label>
                  </div>
                </RadioGroup>
              </div>

              {/* Bank Details */}
              {paymentMethod === 'bank' && (
                <div className="space-y-2">
                  <h3 className="font-semibold">Pilih Bank</h3>
                  <Select value={selectedBank.bankName} onValueChange={(value) => {
                    const bank = bankAccounts.find(b => b.bankName === value);
                    if (bank) setSelectedBank(bank);
                  }}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {bankAccounts.map((bank) => (
                        <SelectItem key={bank.bankName} value={bank.bankName}>
                          {bank.bankName}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <h4 className="font-medium text-blue-900 mb-2">Informasi Rekening Pembayaran</h4>
                    <div className="space-y-1 text-sm">
                      <p><span className="font-medium">Nama Bank:</span> {selectedBank.bankName}</p>
                      <p><span className="font-medium">No. Rekening:</span> {selectedBank.accountNumber}</p>
                      <p><span className="font-medium">Atas Nama:</span> {selectedBank.accountName}</p>
                    </div>
                  </div>
                </div>
              )}

              {/* Total */}
              <div className="border-t pt-4">
                <div className="flex justify-between items-center">
                  <span className="font-semibold text-lg">Total Pembayaran:</span>
                  <span className="font-bold text-xl text-blue-600">{formatCurrency(invoice.total)}</span>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex gap-3">
                <Link href="/payment">
                  <Button variant="outline" className="flex-1">
                    Kembali
                  </Button>
                </Link>
                
                {!invoiceCreated ? (
                  <Button 
                    onClick={handleCheckout}
                    disabled={loading}
                    className="flex-1"
                  >
                    {loading ? (
                      <>
                        <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                        Membuat Invoice...
                      </>
                    ) : (
                      'Checkout Pembayaran'
                    )}
                  </Button>
                ) : (
                  <>
                    <Button 
                      variant="outline"
                      onClick={handleCancelCheckout}
                      className="flex-1"
                    >
                      Cancel Pembayaran
                    </Button>
                    <Button 
                      onClick={handlePaymentConfirmation}
                      disabled={loading}
                      className="flex-1"
                    >
                      {loading ? (
                        <>
                          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                          Memproses...
                        </>
                      ) : (
                        'Konfirmasi Pembayaran'
                      )}
                    </Button>
                  </>
                )}
              </div>

              {error && (
                <Alert variant="destructive">
                  <XCircle className="h-4 w-4" />
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              {success && (
                <Alert className="border-green-200 bg-green-50 text-green-800">
                  <CheckCircle className="h-4 w-4" />
                  <AlertDescription>{success}</AlertDescription>
                </Alert>
              )}
            </CardContent>
          </Card>
        )}

        <div className="text-center mt-8">
          <Link href="/login">
            <Button variant="outline">
              Kembali ke Login
            </Button>
          </Link>
        </div>
      </div>
    </div>
  );
};

export default InvoicePage;